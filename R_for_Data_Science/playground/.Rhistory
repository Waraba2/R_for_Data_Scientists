mean(pop.2$bmi)
mean(pop.2$bmi)
mean(pop.2$bmi)
pop2 <- read_csv("pop2.csv")
mean(pop.2$bmi)
mean(pop2.$bmi)
mean(pop2.$bmi)
mean(pop$2bmi)
View(pop2)
mean(pop2$bmi)
X.bar <- rep(0,10^5)
mean(X.bar)
hist(X.bar)
hist(X.bar)
mean(X.bar)
library(readr)
pop2 <- read_csv("pop2.csv")
mean(pop2$bmi)
X.bar <- rep(0,10^5)
for(i in 1:10^5)
{
X.samp <- sample(pop.2$bmi,150)
X.bar[i] <- mean(X.samp)
}
mean(X.bar)
mean(X.bar)
library(readr)
pop.2 <- read_csv("pop2.csv")
mean(pop.2$bmi)
X.bar <- rep(0,10^5)
for(i in 1:10^5)
{
X.samp <- sample(pop.2$bmi,150)
X.bar[i] <- mean(X.samp)
}
mean(X.bar)
mean(X.bar)
X.bar <- rep(0,10^4)
for(i in 1:10^5)
{
X.samp <- sample(pop.2$bmi,150)
X.bar[i] <- mean(X.samp)
}
mean(X.bar)
mean(X.bar)
for(i in 1:10^4)
mean(X.bar)
library(readr)
pop.2 <- read_csv("pop2.csv")
mean(pop.2$bmi)
X.bar <- rep(0,10^4)
for(i in 1:10^4)
{
X.samp <- sample(pop.2$bmi,150)
X.bar[i] <- mean(X.samp)
}
mean(X.bar)
hist(X.bar)
hist(X.bar)
hist(mean(X.bar))
hist(X.bar)
quantile(X.bar, c(0.1, 0.9))
install.packages("reticulate")
py_run_string("print('Hello, world!')")
library(reticulate)
py_run_string("print('Hello, world!')")
n
library(reticulate)
py_run_string("print('Hello, world!')")
py_module("pandas")
library(reticulate)
py_module("pandas")
import_from_path("pandas")
library(reticulate)
import_from_path("pandas")
reticulate::py_last_error()
pd <- import("pandas")
repl_python()
print(reticulate::py_config())
np <- import("python")
library(reticulate)
np <- import("python")
library(reticulate)
py_run_string("import numpy as np")
py_run_string("my_python_array = np.array([2,4,6,8])")
install.packages("devtools")
devtools::install_github("IRkernel/IRkernel")
install.packages("IRkernel")
IRkernel::installspec()
IRkernel::installspec()
IRkernel::installspec()
library(reticulate)
py_run("print('Hello, world!')")
library(reticulate)
py_run("print('Hello, world!')")
install.packages("reticulate")
install.packages("reticulate")
library(reticulate)
py_run("print('Hello, world!')")
install.packages("reticulate")
install.packages("png")
usethis::edit_r_profile()
print("hello")
library(reticulate)
repl_python()
usethis::edit_r_profile()
library(reticulate)
py_config()
py_config()
py_config()
py_config()
py_config()
library(reticulate)
py_config()
usethis::edit_r_profile()
library(reticulate)
py_config()
library(reticulate)
py_config()
library(reticulate)
repl_python()
library(reticulate)
repl_python()
repl_python()
repl_python()
library(reticulate)
repl_python()
repl_python()
usethis::edit_r_profile()
library(reticulate)
repl_python()
import pandas as pd
140/136
library(here)
library(scales)
library(tidyverse)
theme_set(theme_bw())
knitr::opts_chunk$set(echo = TRUE)
year_counts <- read.delim(here("week3/ngrams/year_counts.tsv"), header=FALSE, sep="\t", col.names = c("term", "year", "volume", "book_count" )) %>%
mutate(term=as.character(term))
total_counts <- read.delim(here("week3/ngrams/total_counts.csv"), skip = 1, header=FALSE, sep=",", col.names = c("year", "total_volume", "page_count", "book_count" ))
joined_year_and_total_counts <- left_join(year_counts, total_counts, by="year") %>%
mutate(proportion = volume/total_volume)
joined_year_and_total_counts %>%
filter(term %in% c("1883", "1910", "1950"), year >= 1850, year <= 2012 ) %>%
ggplot(aes(x=year, y=proportion, color=term)) +
geom_line() +
scale_y_continuous(labels=scales::percent)
View(joined_year_and_total_counts)
peaks <- joined_year_and_total_counts %>%
group_by(term) %>%
arrange(term, desc(proportion), year) %>%
top_n(1)
View(peaks)
View(peaks)
peaks <- joined_year_and_total_counts %>%
group_by(term) %>%
arrange(term, desc(proportion), year) %>%
rename(year = peak_year, proportion = peak_proportion) %>%
top_n(1)
peaks <- joined_year_and_total_counts %>%
group_by(term) %>%
arrange(term, desc(proportion), year) %>%
rename(year = peak_year, proportion = peak_proportion) %>%
top_n(1)
peaks <- joined_year_and_total_counts %>%
group_by(term) %>%
arrange(term, desc(proportion), year) %>%
rename(peak_year = year   ,  peak_proportion = proportion) %>%
top_n(1)
View(peaks)
peaks <- joined_year_and_total_counts %>%
group_by(term) %>%
arrange(term, desc(proportion), year) %>%
rename(peak_year = year   ,  peak_proportion = proportion) %>%
select(everything(), peak_year, peak_proportion)
peaks <- joined_year_and_total_counts %>%
group_by(term) %>%
arrange(term, desc(proportion), year) %>%
rename(peak_year = year   ,  peak_proportion = proportion) %>%
select(everything(), peak_year, peak_proportion) %>%
top_n(1)
View(peaks)
peaks <- joined_year_and_total_counts %>%
group_by(term) %>%
arrange(term, desc(proportion), year) %>%
rename(peak_year = year   ,  peak_proportion = proportion) %>%
select(everything(), peak_year, peak_proportion) %>%
top_n(1)
peaks <- joined_year_and_total_counts %>%
group_by(term) %>%
arrange(term, desc(proportion), year) %>%
rename(peak_year = year   ,  peak_proportion = proportion) %>%
select(everything(), peak_year, peak_proportion) %>%
top_n(1)
View(peaks)
peaks <- joined_year_and_total_counts %>%
group_by(term) %>%
arrange(term, desc(proportion), year) %>%
rename(peak_year = year   ,  peak_proportion = proportion) %>%
top_n(1)
View(peaks)
peaks <- joined_year_and_total_counts %>%
group_by(term) %>%
arrange(term, desc(proportion), year) %>%
rename(peak_year = year   ,  peak_proportion = proportion) %>%
select(term, peak_year, peak_proportion)
View(joined_year_and_total_counts)
computes_half_lifes <- left_join(joined_year_and_total_counts, peaks, by="term")
View(computes_half_lifes)
View(computes_half_lifes)
View(computes_half_lifes)
View(peaks)
top_n(1)
peaks <- joined_year_and_total_counts %>%
group_by(term) %>%
arrange(desc(proportion)) %>%
rename(peak_year = year   ,  peak_proportion = proportion) %>%
select(term, peak_year, peak_proportion)
top_n(1)
peaks <- joined_year_and_total_counts %>%
group_by(term) %>%
arrange(desc(proportion)) %>%
top_n(1) %>%
rename(peak_year = year   ,  peak_proportion = proportion) %>%
select(term, peak_year, peak_proportion)
View(peaks)
computes_half_lifes <- left_join(joined_year_and_total_counts, peaks, by="term")
View(computes_half_lifes)
View(computes_half_lifes)
peaks <- joined_year_and_total_counts %>%
group_by(term) %>%
arrange(desc(proportion)) %>%
top_n(1) %>%
rename(peak_year = year   ,  peak_proportion = proportion) %>%
select(term, peak_year, peak_proportion) %>%
filter(year >= 1550)
peaks <- joined_year_and_total_counts %>%
group_by(term) %>%
arrange(desc(proportion)) %>%
top_n(1) %>%
rename(peak_year = year   ,  peak_proportion = proportion) %>%
filter(year >= 1550)
peaks <- joined_year_and_total_counts %>%
group_by(term) %>%
arrange(desc(proportion)) %>%
top_n(1) %>%
rename(peak_year = year   ,  peak_proportion = proportion) %>%
select(term, peak_year, peak_proportion) %>%
peaks <- joined_year_and_total_counts %>%
group_by(term) %>%
arrange(desc(proportion)) %>%
top_n(1) %>%
rename(peak_year = year   ,  peak_proportion = proportion) %>%
select(term, peak_year, peak_proportion)
peaks <- joined_year_and_total_counts %>%
group_by(term) %>%
arrange(desc(proportion)) %>%
top_n(1) %>%
rename(peak_year = year,  peak_proportion = proportion) %>%
select(term, peak_year, peak_proportion)
View(peaks)
View(computes_half_lifes)
computes_half_lifes <- left_join(joined_year_and_total_counts, peaks, by="term")
computes_half_lifes <- left_join(joined_year_and_total_counts, peaks, by="term") %>%
filter(proportion <= peak_prop / 2)
computes_half_lifes <- left_join(joined_year_and_total_counts, peaks, by="term") %>%
filter(proportion <= peak_proportion / 2)
View(computes_half_lifes)
computes_half_lifes <- left_join(joined_year_and_total_counts, peaks, by="term") %>%
computes_half_lifes <- left_join(joined_year_and_total_counts, peaks, by="term") %>%
filter(proportion <= peak_proportion / 2) %>%
top_n(1, year)
library(here)
library(scales)
library(tidyverse)
theme_set(theme_bw())
knitr::opts_chunk$set(echo = TRUE)
year_counts <- read.delim(here("week3/ngrams/year_counts.tsv"), header=FALSE, sep="\t", col.names = c("term", "year", "volume", "book_count" )) %>%
mutate(term=as.character(term))
total_counts <- read.delim(here("week3/ngrams/total_counts.csv"), skip = 1, header=FALSE, sep=",", col.names = c("year", "total_volume", "page_count", "book_count" ))
joined_year_and_total_counts <- left_join(year_counts, total_counts, by="year") %>%
mutate(proportion = volume/total_volume)
joined_year_and_total_counts %>%
filter(term %in% c("1883", "1910", "1950"), year >= 1850, year <= 2012 ) %>%
ggplot(aes(x=year, y=proportion, color=term)) +
geom_line() +
scale_y_continuous(labels=scales::percent)
peaks <- joined_year_and_total_counts %>%
group_by(term) %>%
arrange(desc(proportion)) %>%
top_n(1) %>%
rename(peak_year = year,  peak_proportion = proportion) %>%
select(term, peak_year, peak_proportion)
computes_half_lifes <- left_join(joined_year_and_total_counts, peaks, by="term") %>%
filter(proportion <= peak_proportion / 2) %>%
top_n(1, year)
View(computes_half_lifes)
View(computes_half_lifes)
computes_half_lifes <- left_join(joined_year_and_total_counts, peaks, by="term") %>%
filter(proportion - peak_year / 2 <= 0) %>%
top_n(1, year)
computes_half_lifes <- left_join(joined_year_and_total_counts, peaks, by="term") %>%
filter(proportion - peak_year / 2 <= 0) %>%
top_n(1, year)
View(computes_half_lifes)
View(computes_half_lifes)
(computes_half_lifes %>%
group_by(term) )
View(computes_half_lifes)
View(computes_half_lifes)
(computes_half_lifes %>%
group_by(year))
ggplot(computes_half_lifes, aes(x = year, y = term)) +
geom_smooth()
ggplot(computes_half_lifes, aes(x = year, y = term)) +
group_by(term)
plot_half_lifes <- computes_half_lifes %>%
group_by(term) %>%
ggplot(plot_half_lifes, aes(x = year, y = term)) +
geom_smooth()
plot_half_lifes <- computes_half_lifes %>%
group_by(term) %>%
ggplot(plot_half_lifes, aes(x = year, y = term)) +
geom_smooth()
plot_half_lifes <- computes_half_lifes %>%
group_by(term) %>%
ggplot(aes(x = year, y = term)) +
geom_smooth()
plot_half_lifes <- computes_half_lifes %>%
group_by(term) %>%
ggplot(aes(x = year, y = term)) +
geom_smooth()
plot_half_lifes <- computes_half_lifes %>%
group_by(term)
View(plot_half_lifes)
plot_half_lifes <- computes_half_lifes %>%
group_by(term, year)
View(plot_half_lifes)
View(plot_half_lifes)
ggplot(aes(x = year, y = proportion)) +
geom_smooth()
ggplot(computes_half_lifes, aes(x = year, y = proportion)) +
geom_smooth()
setwd("C:/Users/hamidou/Documents/An_Introduction_to_Statistical_Learning_In_R")
# We have the read.table() function, which import data into R and the write.table
# function which allows us to export data
Auto <- read.table("Auto.data")
setwd("C:/Users/hamidou/Documents/An_Introduction_to_Statistical_Learning_In_R")
# We have the read.table() function, which import data into R and the write.table
# function which allows us to export data
Auto <- read.table("Auto.data")
# We have the read.table() function, which import data into R and the write.table
# function which allows us to export data
Auto <- read.table("Auto.data")
# We have the read.table() function, which import data into R and the write.table
# function which allows us to export data
Auto <- read.table("Auto.data")
# We have the read.table() function, which import data into R and the write.table
# function which allows us to export data
Auto <- read.table("Auto.data")
# We have the read.table() function, which import data into R and the write.table
# function which allows us to export data
Auto <- read.table("Auto.data")
# We have the read.table() function, which import data into R and the write.table
# function which allows us to export data
Auto <- read.table("Auto.data")
# We have the read.table() function, which import data into R and the write.table
# function which allows us to export data
Auto <- read.table("Auto.data")
# We have the read.table() function, which import data into R and the write.table
# function which allows us to export data
Auto <- read.table("Auto")
# We have the read.table() function, which import data into R and the write.table
# function which allows us to export data
Auto <- read.table("Auto.data")
file.create("Auto.data")
setwd("C:/Users/hamidou/Documents/An_Introduction_to_Statistical_Learning_In_R")
file.create("Auto.data")
setwd("C:/Users/hamidou/Documents/An_Introduction_to_Statistical_Learning_In_R")
file.create("Auto.data")
setwd("C:/Users/hamidou/Documents/R_for_Data_Science/playground")
setwd("C:/Users/hamidou/Documents/An_Introduction_to_Statistical_Learning_In_R")
setwd("C:/Users/hamidou/Documents/An_Introduction_to_Statistical_Learning_In_R")
# We have the read.table() function, which import data into R and the write.table
# function which allows us to export data
Auto <- read.table("Auto.data")
# We have the read.table() function, which import data into R and the write.table
# function which allows us to export data
Auto <- read.table("Auto.data")
setwd("C:/Users/hamidou/Documents/An_Introduction_to_Statistical_Learning_In_R")
# We have the read.table() function, which import data into R and the write.table
# function which allows us to export data
Auto <- read.table("Auto.data")
# We have the read.table() function, which import data into R and the write.table
# function which allows us to export data
Auto <- read.table("Auto.data")
setwd("C:/Users/hamidou/Documents/An_Introduction_to_Statistical_Learning_In_R")
# We have the read.table() function, which import data into R and the write.table
# function which allows us to export data
Auto <- read.table("Auto.data")
# We have the read.table() function, which import data into R and the write.table
# function which allows us to export data
Auto <- read.table("Auto.data")
View(Auto)
head(Auto)
view(Auto)
Auto <- read.table("Auto.data", header = T, na.strings = "?", stringsAsFactors = T)
view(Auto)
# We have the read.table() function, which import data into R and the write.table
# function which allows us to export data.
Auto <- read.table("Auto.data")
View(Auto) # The whole table.
head(Auto) # cople rows in the dataset.
# It is advised to look into files your importing in R before lading them. This on has issues. One R thinks the variable names are part of the data set. Two There are somone rows with "?" in our data set indicating missing values. To solve these problems we do the following:
Auto <- read.table("Auto.data", header = T, na.strings = "?", stringsAsFactors = T)
view(Auto)
# It is advised to look into files your importing in R before lading them. This on has issues. One R thinks the variable names are part of the data set. Two There are somone rows with "?" in our data set indicating missing values. To solve these problems we do the following:
Auto <- read.table("Auto.data", header = T, na.strings = "?", stringsAsFactors = T)
# It is advised to look into files your importing in R before lading them. This on has issues. One R thinks the variable names are part of the data set. Two There are somone rows with "?" in our data set indicating missing values. To solve these problems we do the following:
Auto <- read.table("Auto.data", header = T, na.strings = "?", stringsAsFactors = T)
# We have the read.table() function, which import data into R and the write.table
# function which allows us to export data.
library(readr)
# It is advised to look into files your importing in R before lading them. This on has issues. One R thinks the variable names are part of the data set. Two There are somone rows with "?" in our data set indicating missing values. To solve these problems we do the following:
Auto <- read.table("Auto.data", header = T, na.strings = "?", stringsAsFactors = T)
view(Auto)
View(Auto)
# Loading Data from excel into R another way.
Auto <- read.csv("Auto.csv", na.strings = "?", stringsAsFactors = T)
# Loading Data from excel into R another way.
Auto <- read.csv("Auto.csv", na.strings = "?", stringsAsFactors = T)
# Loading Data from excel into R another way.
Auto <- read.csv("Auto.csv", na.strings = "?", stringsAsFactors = T)
# Loading Data from excel into R another way.
Auto <- read.csv("Auto.csv", na.strings = "?", stringsAsFactors = T)
View(Auto)
library(readr)
# Loading Data from excel into R another way.
Auto <- read.csv("Auto.csv", na.strings = "?", stringsAsFactors = T)
Auto <- read.csv("Auto.csv", na.strings = "?", stringsAsFactors = T)
View(Auto)
dim(Auto)
Auto <- na.omit(Auto)
dim(Auto)
# After properly loading the date we can do things like getting all the variable
# names using the names() function
names(Auto)
# After properly loading the date we can do things like getting all the variable
# names using the names() function
names(Auto)
# In order to plot variable from the Auto data, you need to use the $ to secify
# where the varible is comming from. Not doing so leads to an error.
plot(cylinders, mpg)
# Right way
plot(Auto$cylinders, Auto$mpg)
attach(Auto)
plot(cylinders, mpg)
# The cylinders variable is curenlty treates as a quantitative variable. In order
# to change it from a quantitative to a qualitative variable we use the as.factor() # function.
cylinders <- as.facto(cylinders)
# The cylinders variable is curenlty treates as a quantitative variable. In order
# to change it from a quantitative to a qualitative variable we use the as.factor() # function.
libray(tidyverse)
# The cylinders variable is curenlty treates as a quantitative variable. In order
# to change it from a quantitative to a qualitative variable we use the as.factor() # function.
cylinders <- as.factor(cylinders)
plot(cylinders, mpg)
plot(cylinders, mpg, col = "red")
plot(cylinders, mpg, col - "red", varwidth = T)
plot(cylinders, mpg)
plot(cylinders, mpg, col = "red")
plot(cylinders, mpg, col = "red", varwidth = T)
plot(cylinders, mpg, col = "red", varwidth = T, horizontal = T)
plot(cylinders, mpg, col = "red", varwidth = T, xlab = "cylinders", ylab = "mpg")
# The hist() function plots histograms. col = 2 has the same effect as col = "red".
hist(mpg)
hist(mpg, col = 2)
hist(mpg, col = 2, break = 15)
hist(mpg, col = 2, breaks = 15)
# The pairs() function produces a scatterplot matrix for every pair of variables or
# a subset of variables
pairs(Auto)
pairs(
~ mpg + displacement + horsepower + weight + acceleration + data = Auto
pairs(
~ mpg + displacement + horsepower + weight + acceleration , data = Auto
)
#
plot(hoursepower, mpg)
#
plot(horsepower, mpg)
identity(horsepower, mpg, name)
identify(horsepower, mpg, name)
plot(horsepower, mpg)
identify(horsepower, mpg, name)
#
plot(horsepower, mpg)
identify(horsepower, mpg, name)
plot(horsepower, mpg)
identify(horsepower, mpg, name)
plot(horsepower, mpg)
identify(horsepower, mpg, name)
plot(horsepower, mpg)
identify(horsepower, mpg, name)
# The summary function prosuces an numerical summary of each variable in a data set
#.
summary(Auto)
# that fall in each category.
summary(mpg)
savehistory()
q() # To quit R
